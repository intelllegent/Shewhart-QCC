type = 'scatter',
mode = 'markers',
text = hov_text,
hoverinfo  = 'text+name'
)
p <- add_trace(
p = p,
x = A_Th_first$Date[1:3],
y = A_Th_first$Average_Thickness_nm[1:3],
name = "АААДИН",
type = 'scatter',
mode = 'lines+markers',
color = I('red'),
hoverinfo  = 'text+name'
)
p
# library(plotly)
# library(tidyr)
#
# df0 <- tibble(x = c("11","22","33","44"),
#               y = c(1, 2, 3, 1))
# df0
#
# df1 <- tibble(x = c("11","44"),
#               y = c(1, 2))
# df1
#
# p <- plot_ly(data = df0,
#              x = ~x,
#              y = ~y,
#              name = 'DF0',
#              type = 'scatter',
#              mode = 'markers+lines'
#              )
#
# p <- add_markers(p = p,
#                  data = df1,
#                  x = ~x,
#                  y = ~y,
#                  name = 'DF0',
#                  type = 'scatter',
#                  mode = 'markers',
#                  color = I('red')
#                  )
#
# p
library(tidyr)
library(openxlsx)
library(plotly)
file_path <- 'FRT Weekly Monitoting.xlsx'
Data <- Data_read <- read.xlsx(file_path ,sheet = 1, detectDates = TRUE)
USG_fifth <- Data[Data$Material=="USG - 5k",]
USG_first <- Data[Data$Material=="USG - 1k",]
A_Th_first <- buf <- data.frame(USG_first$Date, USG_first$`Average.Thickness(nm)`)
A_Th_first <- na.omit(A_Th_first)
rownames(A_Th_first)= c(1:length(A_Th_first$USG_first.Date))
names(A_Th_first) <- c('Date','Average_Thickness_nm')
A_Th_first$Average_Thickness_nm <- round(A_Th_first$Average_Thickness_nm,2)
A_Th_first$Date <- as.Date(as.character(A_Th_first$Date))
A_Th_first<-A_Th_first[order(A_Th_first$Date),]
A_Th_fifth <- data.frame(USG_fifth$Date, USG_fifth$`Average.Thickness(nm)`)
A_Th_fifth <- na.omit(A_Th_fifth)
rownames(A_Th_fifth)= c(1:length(A_Th_fifth$USG_fifth.Date))
names(A_Th_fifth) <- c('Date','Average_Thickness_nm')
A_Th_fifth$Average_Thickness_nm <- round(A_Th_fifth$Average_Thickness_nm,2)
#A_Th_fifth$Date <-  as.Date(as.character(A_Th_fifth$Date))
A_Th_fifth<-A_Th_fifth[order(A_Th_fifth$Date),]
Av_usg <- mean(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
Sigm <- sd(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
LCL <- Av_usg - 3 * Sigm
UCL <- Av_usg + 3 * Sigm
values_first <- na.omit(data.frame(Date = USG_first$Date,
Thickness_nm = as.numeric(USG_first$`Thickness(nm)`),
id = rep(1:length(unique(USG_first$Date)), each = 49)))
bands_colors <- c('#FCBBA1', '#FFFFBF', '#C7E9C0',
'#C7E9C0', '#FFFFBF', '#FCBBA1')
hov_text <- paste("Date: ", A_Th_first$Date, "<br>", "Value: ",
A_Th_first$Average_Thickness_nm, "nm")
val_text <- paste("Date: ", values_first$Date, "<br>", "Value: ",
values_first$Thickness_nm, "nm")
p <- plot_ly(data = values_first,
x = ~Date,
y = ~Thickness_nm,
name = 'Thick',
type = 'scatter',
mode = 'markers',
text = val_text,
hoverinfo  = 'text+name'
)
p <- add_trace(
p = p,
x = A_Th_first$Date[1:3],
y = A_Th_first$Average_Thickness_nm[1:3],
name = "АААДИН",
type = 'scatter',
mode = 'lines+markers',
color = I('red'),
hoverinfo  = 'text+name'
)
p
# library(plotly)
# library(tidyr)
#
# df0 <- tibble(x = c("11","22","33","44"),
#               y = c(1, 2, 3, 1))
# df0
#
# df1 <- tibble(x = c("11","44"),
#               y = c(1, 2))
# df1
#
# p <- plot_ly(data = df0,
#              x = ~x,
#              y = ~y,
#              name = 'DF0',
#              type = 'scatter',
#              mode = 'markers+lines'
#              )
#
# p <- add_markers(p = p,
#                  data = df1,
#                  x = ~x,
#                  y = ~y,
#                  name = 'DF0',
#                  type = 'scatter',
#                  mode = 'markers',
#                  color = I('red')
#                  )
#
# p
library(tidyr)
library(openxlsx)
library(plotly)
file_path <- 'FRT Weekly Monitoting.xlsx'
Data <- Data_read <- read.xlsx(file_path ,sheet = 1, detectDates = TRUE)
USG_fifth <- Data[Data$Material=="USG - 5k",]
USG_first <- Data[Data$Material=="USG - 1k",]
A_Th_first <- buf <- data.frame(USG_first$Date, USG_first$`Average.Thickness(nm)`)
A_Th_first <- na.omit(A_Th_first)
rownames(A_Th_first)= c(1:length(A_Th_first$USG_first.Date))
names(A_Th_first) <- c('Date','Average_Thickness_nm')
A_Th_first$Average_Thickness_nm <- round(A_Th_first$Average_Thickness_nm,2)
A_Th_first$Date <- as.Date(as.character(A_Th_first$Date))
A_Th_first<-A_Th_first[order(A_Th_first$Date),]
A_Th_fifth <- data.frame(USG_fifth$Date, USG_fifth$`Average.Thickness(nm)`)
A_Th_fifth <- na.omit(A_Th_fifth)
rownames(A_Th_fifth)= c(1:length(A_Th_fifth$USG_fifth.Date))
names(A_Th_fifth) <- c('Date','Average_Thickness_nm')
A_Th_fifth$Average_Thickness_nm <- round(A_Th_fifth$Average_Thickness_nm,2)
#A_Th_fifth$Date <-  as.Date(as.character(A_Th_fifth$Date))
A_Th_fifth<-A_Th_fifth[order(A_Th_fifth$Date),]
Av_usg <- mean(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
Sigm <- sd(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
LCL <- Av_usg - 3 * Sigm
UCL <- Av_usg + 3 * Sigm
values_first <- na.omit(data.frame(Date = USG_first$Date,
Thickness_nm = as.numeric(USG_first$`Thickness(nm)`),
id = rep(1:length(unique(USG_first$Date)), each = 49)))
bands_colors <- c('#FCBBA1', '#FFFFBF', '#C7E9C0',
'#C7E9C0', '#FFFFBF', '#FCBBA1')
hov_text <- paste("Date: ", A_Th_first$Date, "<br>", "Value: ",
A_Th_first$Average_Thickness_nm, "nm")
val_text <- paste("Date: ", values_first$Date, "<br>", "Value: ",
values_first$Thickness_nm, "nm")
p <- plot_ly(data = values_first,
x = ~Date,
y = ~Thickness_nm,
name = 'Thick',
type = 'scatter',
mode = 'markers',
text = val_text,
hoverinfo  = 'text+name'
)
p
# library(plotly)
# library(tidyr)
#
# df0 <- tibble(x = c("11","22","33","44"),
#               y = c(1, 2, 3, 1))
# df0
#
# df1 <- tibble(x = c("11","44"),
#               y = c(1, 2))
# df1
#
# p <- plot_ly(data = df0,
#              x = ~x,
#              y = ~y,
#              name = 'DF0',
#              type = 'scatter',
#              mode = 'markers+lines'
#              )
#
# p <- add_markers(p = p,
#                  data = df1,
#                  x = ~x,
#                  y = ~y,
#                  name = 'DF0',
#                  type = 'scatter',
#                  mode = 'markers',
#                  color = I('red')
#                  )
#
# p
library(tidyr)
library(openxlsx)
library(plotly)
file_path <- 'FRT Weekly Monitoting.xlsx'
Data <- Data_read <- read.xlsx(file_path ,sheet = 1, detectDates = TRUE)
USG_fifth <- Data[Data$Material=="USG - 5k",]
USG_first <- Data[Data$Material=="USG - 1k",]
A_Th_first <- buf <- data.frame(USG_first$Date, USG_first$`Average.Thickness(nm)`)
A_Th_first <- na.omit(A_Th_first)
rownames(A_Th_first)= c(1:length(A_Th_first$USG_first.Date))
names(A_Th_first) <- c('Date','Average_Thickness_nm')
A_Th_first$Average_Thickness_nm <- round(A_Th_first$Average_Thickness_nm,2)
A_Th_first$Date <- as.Date(as.character(A_Th_first$Date))
A_Th_first<-A_Th_first[order(A_Th_first$Date),]
A_Th_fifth <- data.frame(USG_fifth$Date, USG_fifth$`Average.Thickness(nm)`)
A_Th_fifth <- na.omit(A_Th_fifth)
rownames(A_Th_fifth)= c(1:length(A_Th_fifth$USG_fifth.Date))
names(A_Th_fifth) <- c('Date','Average_Thickness_nm')
A_Th_fifth$Average_Thickness_nm <- round(A_Th_fifth$Average_Thickness_nm,2)
#A_Th_fifth$Date <-  as.Date(as.character(A_Th_fifth$Date))
A_Th_fifth<-A_Th_fifth[order(A_Th_fifth$Date),]
Av_usg <- mean(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
Sigm <- sd(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
LCL <- Av_usg - 3 * Sigm
UCL <- Av_usg + 3 * Sigm
values_first <- na.omit(data.frame(Date = USG_first$Date,
Thickness_nm = as.numeric(USG_first$`Thickness(nm)`),
id = rep(1:length(unique(USG_first$Date)), each = 49)))
bands_colors <- c('#FCBBA1', '#FFFFBF', '#C7E9C0',
'#C7E9C0', '#FFFFBF', '#FCBBA1')
hov_text <- paste("Date: ", A_Th_first$Date, "<br>", "Value: ",
A_Th_first$Average_Thickness_nm, "nm")
val_text <- paste("Date: ", values_first$Date, "<br>", "Value: ",
values_first$Thickness_nm, "nm")
p <- plot_ly(data = values_first,
x = ~Date,
y = ~Thickness_nm,
name = 'Thick',
type = 'scatter',
mode = 'markers',
)
p <- add_trace(
p = p,
x = A_Th_first$Date[1:3],
y = A_Th_first$Average_Thickness_nm[1:3],
name = "АААДИН",
type = 'scatter',
mode = 'lines+markers',
color = I('red'),
hoverinfo  = 'text+name'
)
p
# library(plotly)
# library(tidyr)
#
# df0 <- tibble(x = c("11","22","33","44"),
#               y = c(1, 2, 3, 1))
# df0
#
# df1 <- tibble(x = c("11","44"),
#               y = c(1, 2))
# df1
#
# p <- plot_ly(data = df0,
#              x = ~x,
#              y = ~y,
#              name = 'DF0',
#              type = 'scatter',
#              mode = 'markers+lines'
#              )
#
# p <- add_markers(p = p,
#                  data = df1,
#                  x = ~x,
#                  y = ~y,
#                  name = 'DF0',
#                  type = 'scatter',
#                  mode = 'markers',
#                  color = I('red')
#                  )
#
# p
library(tidyr)
library(openxlsx)
library(plotly)
file_path <- 'FRT Weekly Monitoting.xlsx'
Data <- Data_read <- read.xlsx(file_path ,sheet = 1, detectDates = TRUE)
USG_fifth <- Data[Data$Material=="USG - 5k",]
USG_first <- Data[Data$Material=="USG - 1k",]
A_Th_first <- buf <- data.frame(USG_first$Date, USG_first$`Average.Thickness(nm)`)
A_Th_first <- na.omit(A_Th_first)
rownames(A_Th_first)= c(1:length(A_Th_first$USG_first.Date))
names(A_Th_first) <- c('Date','Average_Thickness_nm')
A_Th_first$Average_Thickness_nm <- round(A_Th_first$Average_Thickness_nm,2)
A_Th_first$Date <- as.Date(as.character(A_Th_first$Date))
A_Th_first<-A_Th_first[order(A_Th_first$Date),]
A_Th_fifth <- data.frame(USG_fifth$Date, USG_fifth$`Average.Thickness(nm)`)
A_Th_fifth <- na.omit(A_Th_fifth)
rownames(A_Th_fifth)= c(1:length(A_Th_fifth$USG_fifth.Date))
names(A_Th_fifth) <- c('Date','Average_Thickness_nm')
A_Th_fifth$Average_Thickness_nm <- round(A_Th_fifth$Average_Thickness_nm,2)
#A_Th_fifth$Date <-  as.Date(as.character(A_Th_fifth$Date))
A_Th_fifth<-A_Th_fifth[order(A_Th_fifth$Date),]
Av_usg <- mean(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
Sigm <- sd(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
LCL <- Av_usg - 3 * Sigm
UCL <- Av_usg + 3 * Sigm
values_first <- na.omit(data.frame(Date = USG_first$Date,
Thickness_nm = as.numeric(USG_first$`Thickness(nm)`),
id = rep(1:length(unique(USG_first$Date)), each = 49)))
bands_colors <- c('#FCBBA1', '#FFFFBF', '#C7E9C0',
'#C7E9C0', '#FFFFBF', '#FCBBA1')
hov_text <- paste("Date: ", A_Th_first$Date, "<br>", "Value: ",
A_Th_first$Average_Thickness_nm, "nm")
val_text <- paste("Date: ", values_first$Date, "<br>", "Value: ",
values_first$Thickness_nm, "nm")
p <- plot_ly(data = values_first,
x = ~Date,
y = ~Thickness_nm,
name = 'Thick',
type = 'scatter',
mode = 'markers',
)
p <- add_trace(
p = p,
x = A_Th_first$Date[1:3],
y = A_Th_first$Average_Thickness_nm[1:3],
name = "АААДИН",
type = 'scatter',
mode = 'lines+markers',
color = I('red'),
)
p
# library(plotly)
# library(tidyr)
#
# df0 <- tibble(x = c("11","22","33","44"),
#               y = c(1, 2, 3, 1))
# df0
#
# df1 <- tibble(x = c("11","44"),
#               y = c(1, 2))
# df1
#
# p <- plot_ly(data = df0,
#              x = ~x,
#              y = ~y,
#              name = 'DF0',
#              type = 'scatter',
#              mode = 'markers+lines'
#              )
#
# p <- add_markers(p = p,
#                  data = df1,
#                  x = ~x,
#                  y = ~y,
#                  name = 'DF0',
#                  type = 'scatter',
#                  mode = 'markers',
#                  color = I('red')
#                  )
#
# p
library(tidyr)
library(openxlsx)
library(plotly)
file_path <- 'FRT Weekly Monitoting.xlsx'
Data <- Data_read <- read.xlsx(file_path ,sheet = 1, detectDates = TRUE)
USG_fifth <- Data[Data$Material=="USG - 5k",]
USG_first <- Data[Data$Material=="USG - 1k",]
A_Th_first <- buf <- data.frame(USG_first$Date, USG_first$`Average.Thickness(nm)`)
A_Th_first <- na.omit(A_Th_first)
rownames(A_Th_first)= c(1:length(A_Th_first$USG_first.Date))
names(A_Th_first) <- c('Date','Average_Thickness_nm')
A_Th_first$Average_Thickness_nm <- round(A_Th_first$Average_Thickness_nm,2)
A_Th_first$Date <- as.Date(as.character(A_Th_first$Date))
A_Th_first<-A_Th_first[order(A_Th_first$Date),]
A_Th_fifth <- data.frame(USG_fifth$Date, USG_fifth$`Average.Thickness(nm)`)
A_Th_fifth <- na.omit(A_Th_fifth)
rownames(A_Th_fifth)= c(1:length(A_Th_fifth$USG_fifth.Date))
names(A_Th_fifth) <- c('Date','Average_Thickness_nm')
A_Th_fifth$Average_Thickness_nm <- round(A_Th_fifth$Average_Thickness_nm,2)
#A_Th_fifth$Date <-  as.Date(as.character(A_Th_fifth$Date))
A_Th_fifth<-A_Th_fifth[order(A_Th_fifth$Date),]
Av_usg <- mean(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
Sigm <- sd(A_Th_first$Average_Thickness_nm, na.rm = TRUE)
LCL <- Av_usg - 3 * Sigm
UCL <- Av_usg + 3 * Sigm
values_first <- na.omit(data.frame(Date = USG_first$Date,
Thickness_nm = as.numeric(USG_first$`Thickness(nm)`),
id = rep(1:length(unique(USG_first$Date)), each = 49)))
bands_colors <- c('#FCBBA1', '#FFFFBF', '#C7E9C0',
'#C7E9C0', '#FFFFBF', '#FCBBA1')
hov_text <- paste("Date: ", A_Th_first$Date, "<br>", "Value: ",
A_Th_first$Average_Thickness_nm, "nm")
val_text <- paste("Date: ", values_first$Date, "<br>", "Value: ",
values_first$Thickness_nm, "nm")
p <- plot_ly(data = values_first,
x = ~Date,
y = ~Thickness_nm,
name = 'Thick',
type = 'scatter',
mode = 'markers'
)
p <- add_trace(
p = p,
x = A_Th_first$Date[1:3],
y = A_Th_first$Average_Thickness_nm[1:3],
name = "АААДИН",
type = 'scatter',
mode = 'lines+markers',
color = I('red')
)
p
runApp()
add_trash <- function(plot, table, label) {
pl <- add_markers(
p = plot,
x = table$point,
y = table$value,
name = label,
type = 'scatter',
mode = 'markers',
color = I('red')
)
return(pl)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
